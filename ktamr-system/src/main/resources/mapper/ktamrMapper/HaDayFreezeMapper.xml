<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ktamr.mapper.HaDayFreezeMapper">

    <resultMap id="haDayfreezeMap" type="com.ktamr.domain.HaDayfreeze">

        <result column="meterId" property="meterId" javaType="java.lang.Integer" jdbcType="INTEGER"></result>
        <result column="meterNumber" property="meterNumber" javaType="java.lang.Long"></result>
        <result column="tread" property="tread" javaType="java.lang.Integer"></result>
        <result column="lread" property="lread" javaType="java.lang.Integer"></result>
        <result column="amount" property="amount" javaType="java.lang.Integer" jdbcType="INTEGER"></result>
        <result column="state" property="state" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <result column="fday" property="fday" javaType="java.util.Date" ></result>
        <result column="readTime" property="readTime" javaType="java.util.Date" ></result>
        <result column="userDs" property="userDs" javaType="java.lang.String" jdbcType="VARCHAR"></result>
        <association property="havMeterinfo" javaType="com.ktamr.domain.HavMeterinfo">
            <result column="userNo" property="userNo" javaType="java.lang.String" jdbcType="VARCHAR"></result>
            <result column="userName" property="userName" javaType="java.lang.String" jdbcType="VARCHAR"></result>
            <result column="userDs" property="userDs" javaType="java.lang.String" jdbcType="VARCHAR"></result>
            <result column="meterNumber" property="meterNumber" javaType="java.lang.Long" jdbcType="INTEGER"></result>
        </association>
    </resultMap>

    <insert id="insertDayFreeze" useGeneratedKeys="true"  keyProperty="resultParams.dayFreezeId"  parameterType="com.ktamr.domain.HaMeter">
        INSERT INTO ha_dayfreeze(meterid, meterNumber, centorid, collectorid, fday, lday, readTime, state, t_read, l_read, amount)
        SELECT m.meterId, m.meterNumber, m.centorid, m.collectorid, to_date(#{thRTime},'yyyy-mm-dd')-1,m.fday,
         to_date(#{thRTime},'yyyy-mm-dd'),#{state},#{thNumber},#{thNumber},0
         from ha_meter m
         WHERE m.meterId=#{meterId}
    </insert>

    <insert id="insertDayFreezeTwo">
        INSERT INTO ha_dayfreeze(meterid, meterNumber, centorid, collectorid, fday, lday, readTime, state, t_read, l_read, amount)
        SELECT m.meterId
        , m.meterNumber
        , m.centorid
        , m.collectorid
        , current_date-1
        , m.fday
        , t.readTime
        , t.state
        , t.readNumber
        , t.readNumber
        , 0
        FROM ha_meter m, hat_metersRecordImport t
        WHERE m.meterid=t.meterId AND t.hasDayFreeze!=1 AND t.check_result='待导入' AND to_char(importTime,'yyyy-MM-dd HH24:mi:ss')=#{importTime}
    </insert>

    <update id="updateDayFreeze">
        UPDATE ha_dayfreeze SET t_read=#{thNumber},l_read=#{thNumber},readTime=to_date(#{thRTime},'yyyy-mm-dd'),
        amount=0,state=#{state}
        WHERE meterid=#{meterId} and fday=to_date(#{thRTime},'yyyy-mm-dd')-1
    </update>

    <update id="updateDayFreezeTwo">
        update ha_dayfreeze df set
        t_read=t.readNumber,l_read=t.readNumber, readTime=t.readTime, amount=0, state=t.state
        FROM hat_metersRecordImport t
        WHERE df.meterid=t.meterId
        AND df.fday=current_date-1
        AND t.check_result='待导入'
        AND to_char(importTime,'yyyy-MM-dd HH24:mi:ss')=#{importTime}
    </update>

    <delete id="delHaDayFreeze">
        delete from ha_dayfreeze where meterid=#{meterId}
    </delete>

    <select id="selectDayFreezeMeterIdCount" resultType="java.lang.Integer"  parameterType="com.ktamr.domain.HaMeter">
        SELECT Count(meterid) FROM ha_dayfreeze WHERE meterid=#{meterId} and fday=to_date(#{thRTime},'yyyy-mm-dd')-1
    </select>

    <select id="selectFreeze" resultMap="haDayfreezeMap">
        select * from (SELECT fz.meterId
            ,mi.用户号 AS userNo
            , mi.用户名 AS userName
            , mi.用户地址 AS userDs
            , mi.表号 AS meterNumber
            , fz.t_read AS tread
            ,fz.l_read AS lread
            ,fz.amount AS amount
            ,fz.state AS state
            ,fz.fday AS fday
            ,fz.readTime AS readTime
            <if test=' params.dataType == "lastDayFreeze"'>
                FROM ha_dayfreeze fz
                inner join hav_meterinfo mi on mi.meterid = fz.meterid
                where fday = (select max(fday) from ha_dayfreeze fz2 where fz2.meterid=fz.meterid)
            </if>
            <if test=' params.dataType == "lastMonFreeze"'>
                FROM ha_monfreeze fz
                inner join hav_meterinfo mi on mi.meterid = fz.meterid
                where fday = (select max(fday) from ha_monfreeze fz2 where fz2.meterid=fz.meterid)
            </if>
            <if test=' params.dataType == "dayFreeze"'>
                FROM ha_dayfreeze fz
                inner join hav_meterinfo mi on mi.meterid = fz.meterid
                WHERE 1=1
            </if>
            <if test=' params.dataType == "monFreeze"'>
                FROM ha_monfreeze fz
                inner join hav_meterinfo mi on mi.meterid = fz.meterid
                WHERE 1=1
            </if>
            <!--数据范围过滤-->
            ${params.getRightCondition}
            <if test=' params.nodeType == "area" and params.nodeIds != "" '>
                AND mi.areaid IN (cast(#{params.nodeIds} as INTEGER))
            </if>
            <if test=' params.nodeType == "rgn" and params.nodeIds != "" '>
                AND position(Left(mi.areaNo, 1) IN #{params.nodeIds})>0
            </if>
            <if test='  params.startDate != null and params.startDate != ""  '>
                AND fz.fday BETWEEN to_date(#{params.startDate},'yyyy-mm-dd hh24:mi:ss') and
                to_date(#{params.endDate},'yyyy-mm-dd hh24:mi:ss')
            </if>
            <if test=' params.dataType == "monFreeze" and params.startDate != null and params.startDate != "" and params.endDate != null and params.endDate != "" '>
                AND fz.readTime BETWEEN to_date(#{params.startDate},'yyyy-mm-dd hh24:mi:ss') and
                to_date(#{params.endDate},'yyyy-mm-dd hh24:mi:ss')
            </if>
            <if test=' params.keyWord != null and params.keyWord != "" '>
                and (mi.用户号 like '%${params.keyWord}%'
                or mi.用户名 like '%${params.keyWord}%'
                or mi.用户地址 like '%${params.keyWord}%'
                or mi.表号::varchar(16) like '%${params.keyWord}%'
                )
            </if>
        ) t
        <!--多条件查询-->
        ${multipleConditions}
    </select>


    <select id="selectAllDayfreeze" resultMap="haDayfreezeMap" parameterType="java.util.Map">
        select * from (SELECT meterid AS meterId
            , t_read AS tRead
            , amount AS aMount
            , fday AS fDay
            , state AS state
            FROM ha_dayfreeze
            WHERE meterid = #{meterId}
            <if test=" startDate != null and startDate != '' and endDate != null and endDate != '' ">
                and fday BETWEEN to_date(#{startDate}, 'yyyy-mm-dd hh24:mi:ss') AND to_date(#{endDate},
                'yyyy-mm-dd hh24:mi:ss')
            </if>
        ) t
        <!--多条件查询-->
        ${multipleConditions}
        order by fday desc
    </select>

    <!--加入日冻结数据-->
    <select id="fdayDataCount" resultType="com.ktamr.domain.HaDayfreeze">
        SELECT Count(meterid) FROM ha_dayfreeze WHERE meterid=#{meterId} AND to_char(fday, 'yyyy-mm-dd')=to_char(current_date-1,'yyyy-mm-dd')")
    </select>

    <update id="fdayDataCount2">
        UPDATE ha_dayfreeze SET t_read=#{orimeterRead},l_read=#{orimeterRead},readTime=now(),amount=0,state='已更换'
        WHERE meterid=#{meterId} AND to_char(fday, 'yyyy-mm-dd')=to_char(current_date-1, 'YYYY-MM-DD')"
    </update>

    <insert id="fdayDataCount3">
        INSERT INTO ha_dayfreeze(meterid, meterNumber, centorid, collectorid, fday, lday, readTime, state, t_read, l_read, amount)
        SELECT
        m.meterId, m.meterNumber, m.centorid, m.collectorid, current_date-1, m.fday,now(), '已更换',#{orimeterRead},#{orimeterRead},0 FROM ha_meter m
		WHERE m.meterId=#{meterId}
    </insert>
</mapper>